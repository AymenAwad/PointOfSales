// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220725142531_awab")]
    partial class awab
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Core.Entities.AspNetRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Core.Entities.AspNetUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creationdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LastupdatedBy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nameen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreQuantitiesId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreReturnedId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplimentId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Userpassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VauchersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SaleId");

                    b.HasIndex("StoreQuantitiesId");

                    b.HasIndex("StoreReturnedId");

                    b.HasIndex("SupplimentId");

                    b.HasIndex("VauchersId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Core.Entities.AspNetUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Core.Entities.BranchGallary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplimentId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.HasIndex("SupplimentId");

                    b.ToTable("BranchGallaries");
                });

            modelBuilder.Entity("Core.Entities.Catogery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesInformationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreReturnedsId")
                        .HasColumnType("int");

                    b.Property<int?>("StoseQuantitiesId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplimentInformationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemsId");

                    b.HasIndex("SalesInformationId");

                    b.HasIndex("StoreReturnedsId");

                    b.HasIndex("StoseQuantitiesId");

                    b.HasIndex("SupplimentInformationId");

                    b.ToTable("Catogeries");
                });

            modelBuilder.Entity("Core.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CatogeryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SalesInformationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreQuantitiesId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreReturnedId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplimentInformationId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalesInformationId");

                    b.HasIndex("StoreQuantitiesId");

                    b.HasIndex("StoreReturnedId");

                    b.HasIndex("SupplimentInformationId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Core.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<string>("AgentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesInformationId")
                        .HasColumnType("int");

                    b.Property<int?>("SattelmentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplimentInformationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalesInformationId");

                    b.HasIndex("SattelmentId");

                    b.HasIndex("SupplimentInformationId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Core.Entities.SalesInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCatogery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quentity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SalesInformations");
                });

            modelBuilder.Entity("Core.Entities.Sattelment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountStill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FromAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromName")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sattelments");
                });

            modelBuilder.Entity("Core.Entities.StoreQuantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CatogeryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastUpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StoreQuantities");
                });

            modelBuilder.Entity("Core.Entities.StoreReturned", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatogeryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastUpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SaleBuy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StoreReturneds");
                });

            modelBuilder.Entity("Core.Entities.Story", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchGallaryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreQuantitiesId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreReturnedId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchGallaryId");

                    b.HasIndex("StoreQuantitiesId");

                    b.HasIndex("StoreReturnedId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("Core.Entities.Suplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplimentId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplimentId");

                    b.ToTable("Supliers");
                });

            modelBuilder.Entity("Core.Entities.Suppliment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CreatedBy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesInformationId")
                        .HasColumnType("int");

                    b.Property<int?>("SattelmentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplimentInformationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalesInformationId");

                    b.HasIndex("SattelmentId");

                    b.HasIndex("SupplimentInformationId");

                    b.ToTable("Suppliments");
                });

            modelBuilder.Entity("Core.Entities.SupplimentInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCatogery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ItemId")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quentity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SaleId")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitId")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SupplimentInformations");
                });

            modelBuilder.Entity("Core.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesInformationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplimentInformationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SalesInformationId");

                    b.HasIndex("SupplimentInformationId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Core.Entities.Vaucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CreatedBy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FeesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FeesType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Lastupdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VaucherCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vauchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Core.Entities.Agent", b =>
                {
                    b.HasOne("Core.Entities.Sale", "Sale")
                        .WithMany("Agents")
                        .HasForeignKey("SaleId");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Core.Entities.AspNetUser", b =>
                {
                    b.HasOne("Core.Entities.Item", "Item")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("ItemId");

                    b.HasOne("Core.Entities.Sale", "Sale")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("SaleId");

                    b.HasOne("Core.Entities.StoreQuantity", "StoreQuantities")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("StoreQuantitiesId");

                    b.HasOne("Core.Entities.StoreReturned", "StoreReturned")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("StoreReturnedId");

                    b.HasOne("Core.Entities.Suppliment", "Suppliment")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("SupplimentId");

                    b.HasOne("Core.Entities.Vaucher", "Vauchers")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("VauchersId");

                    b.Navigation("Item");

                    b.Navigation("Sale");

                    b.Navigation("StoreQuantities");

                    b.Navigation("StoreReturned");

                    b.Navigation("Suppliment");

                    b.Navigation("Vauchers");
                });

            modelBuilder.Entity("Core.Entities.AspNetUserRole", b =>
                {
                    b.HasOne("Core.Entities.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.BranchGallary", b =>
                {
                    b.HasOne("Core.Entities.Sale", "Sale")
                        .WithMany("BranchGallaries")
                        .HasForeignKey("SaleId");

                    b.HasOne("Core.Entities.Suppliment", "Suppliment")
                        .WithMany("BranchGallaries")
                        .HasForeignKey("SupplimentId");

                    b.Navigation("Sale");

                    b.Navigation("Suppliment");
                });

            modelBuilder.Entity("Core.Entities.Catogery", b =>
                {
                    b.HasOne("Core.Entities.Item", "Items")
                        .WithMany("Catogeries")
                        .HasForeignKey("ItemsId");

                    b.HasOne("Core.Entities.SalesInformation", "SalesInformation")
                        .WithMany("Catogeries")
                        .HasForeignKey("SalesInformationId");

                    b.HasOne("Core.Entities.StoreReturned", "StoreReturneds")
                        .WithMany("Catogeries")
                        .HasForeignKey("StoreReturnedsId");

                    b.HasOne("Core.Entities.StoreQuantity", "StoseQuantities")
                        .WithMany("Catogeries")
                        .HasForeignKey("StoseQuantitiesId");

                    b.HasOne("Core.Entities.SupplimentInformation", "SupplimentInformation")
                        .WithMany("Catogeries")
                        .HasForeignKey("SupplimentInformationId");

                    b.Navigation("Items");

                    b.Navigation("SalesInformation");

                    b.Navigation("StoreReturneds");

                    b.Navigation("StoseQuantities");

                    b.Navigation("SupplimentInformation");
                });

            modelBuilder.Entity("Core.Entities.Item", b =>
                {
                    b.HasOne("Core.Entities.SalesInformation", "SalesInformation")
                        .WithMany("Items")
                        .HasForeignKey("SalesInformationId");

                    b.HasOne("Core.Entities.StoreQuantity", "StoreQuantities")
                        .WithMany("Items")
                        .HasForeignKey("StoreQuantitiesId");

                    b.HasOne("Core.Entities.StoreReturned", "StoreReturned")
                        .WithMany("Items")
                        .HasForeignKey("StoreReturnedId");

                    b.HasOne("Core.Entities.SupplimentInformation", "SupplimentInformation")
                        .WithMany("Items")
                        .HasForeignKey("SupplimentInformationId");

                    b.Navigation("SalesInformation");

                    b.Navigation("StoreQuantities");

                    b.Navigation("StoreReturned");

                    b.Navigation("SupplimentInformation");
                });

            modelBuilder.Entity("Core.Entities.Sale", b =>
                {
                    b.HasOne("Core.Entities.SalesInformation", "SalesInformation")
                        .WithMany("Sales")
                        .HasForeignKey("SalesInformationId");

                    b.HasOne("Core.Entities.Sattelment", "Sattelment")
                        .WithMany("Sales")
                        .HasForeignKey("SattelmentId");

                    b.HasOne("Core.Entities.SupplimentInformation", "SupplimentInformation")
                        .WithMany("Sales")
                        .HasForeignKey("SupplimentInformationId");

                    b.Navigation("SalesInformation");

                    b.Navigation("Sattelment");

                    b.Navigation("SupplimentInformation");
                });

            modelBuilder.Entity("Core.Entities.Story", b =>
                {
                    b.HasOne("Core.Entities.BranchGallary", "BranchGallary")
                        .WithMany("Stories")
                        .HasForeignKey("BranchGallaryId");

                    b.HasOne("Core.Entities.StoreQuantity", "StoreQuantities")
                        .WithMany("Stories")
                        .HasForeignKey("StoreQuantitiesId");

                    b.HasOne("Core.Entities.StoreReturned", "StoreReturned")
                        .WithMany("Stories")
                        .HasForeignKey("StoreReturnedId");

                    b.Navigation("BranchGallary");

                    b.Navigation("StoreQuantities");

                    b.Navigation("StoreReturned");
                });

            modelBuilder.Entity("Core.Entities.Suplier", b =>
                {
                    b.HasOne("Core.Entities.Suppliment", "Suppliment")
                        .WithMany("Supliers")
                        .HasForeignKey("SupplimentId");

                    b.Navigation("Suppliment");
                });

            modelBuilder.Entity("Core.Entities.Suppliment", b =>
                {
                    b.HasOne("Core.Entities.SalesInformation", "SalesInformation")
                        .WithMany("Suppliments")
                        .HasForeignKey("SalesInformationId");

                    b.HasOne("Core.Entities.Sattelment", "Sattelment")
                        .WithMany("Suppliments")
                        .HasForeignKey("SattelmentId");

                    b.HasOne("Core.Entities.SupplimentInformation", "SupplimentInformation")
                        .WithMany("Suppliments")
                        .HasForeignKey("SupplimentInformationId");

                    b.Navigation("SalesInformation");

                    b.Navigation("Sattelment");

                    b.Navigation("SupplimentInformation");
                });

            modelBuilder.Entity("Core.Entities.Unit", b =>
                {
                    b.HasOne("Core.Entities.Item", "Item")
                        .WithMany("Units")
                        .HasForeignKey("ItemId");

                    b.HasOne("Core.Entities.SalesInformation", "SalesInformation")
                        .WithMany("Units")
                        .HasForeignKey("SalesInformationId");

                    b.HasOne("Core.Entities.SupplimentInformation", "SupplimentInformation")
                        .WithMany("Units")
                        .HasForeignKey("SupplimentInformationId");

                    b.Navigation("Item");

                    b.Navigation("SalesInformation");

                    b.Navigation("SupplimentInformation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Core.Entities.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Core.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Core.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Core.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.AspNetRole", b =>
                {
                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("Core.Entities.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("Core.Entities.BranchGallary", b =>
                {
                    b.Navigation("Stories");
                });

            modelBuilder.Entity("Core.Entities.Item", b =>
                {
                    b.Navigation("AspNetUsers");

                    b.Navigation("Catogeries");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Core.Entities.Sale", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("AspNetUsers");

                    b.Navigation("BranchGallaries");
                });

            modelBuilder.Entity("Core.Entities.SalesInformation", b =>
                {
                    b.Navigation("Catogeries");

                    b.Navigation("Items");

                    b.Navigation("Sales");

                    b.Navigation("Suppliments");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Core.Entities.Sattelment", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("Suppliments");
                });

            modelBuilder.Entity("Core.Entities.StoreQuantity", b =>
                {
                    b.Navigation("AspNetUsers");

                    b.Navigation("Catogeries");

                    b.Navigation("Items");

                    b.Navigation("Stories");
                });

            modelBuilder.Entity("Core.Entities.StoreReturned", b =>
                {
                    b.Navigation("AspNetUsers");

                    b.Navigation("Catogeries");

                    b.Navigation("Items");

                    b.Navigation("Stories");
                });

            modelBuilder.Entity("Core.Entities.Suppliment", b =>
                {
                    b.Navigation("AspNetUsers");

                    b.Navigation("BranchGallaries");

                    b.Navigation("Supliers");
                });

            modelBuilder.Entity("Core.Entities.SupplimentInformation", b =>
                {
                    b.Navigation("Catogeries");

                    b.Navigation("Items");

                    b.Navigation("Sales");

                    b.Navigation("Suppliments");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Core.Entities.Vaucher", b =>
                {
                    b.Navigation("AspNetUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
